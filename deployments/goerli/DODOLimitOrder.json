{
  "address": "0x65934e2f228Fde069A6255F46E6A15Bc9DE38545",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "AddAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "AddWhileList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFeeReceiver",
          "type": "address"
        }
      ],
      "name": "ChangeFeeReceiver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "curTakerFillAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "curMakerFillAmount",
          "type": "uint256"
        }
      ],
      "name": "LimitOrderFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferPrepared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "curTakerFillAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "curMakerFillAmount",
          "type": "uint256"
        }
      ],
      "name": "RFQByPlatformFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "curTakerFillAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "curMakerFillAmount",
          "type": "uint256"
        }
      ],
      "name": "RFQByUserFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "RemoveAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "RemoveWhiteList",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ORDER_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RFQ_ORDER_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_DODO_APPROVE_PROXY_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_FEE_RECEIVER_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "_FILLED_TAKER_AMOUNT_",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_NEW_OWNER_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_OWNER_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_RFQ_FILLED_TAKER_AMOUNT_",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddr",
          "type": "address"
        }
      ],
      "name": "addAdminList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        }
      ],
      "name": "addWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeReceiver",
          "type": "address"
        }
      ],
      "name": "changeFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "makerToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "takerToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makerAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takerAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expiration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct DODOLimitOrder.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "takerFillAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thresholdTakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "takerInteraction",
          "type": "bytes"
        }
      ],
      "name": "fillLimitOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "curTakerFillAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "curMakerFillAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dodoApproveProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeReciver",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "initOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAdminListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isWhiteListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "makerToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "takerToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makerAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takerAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "makerTokenFeeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takerFillAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expiration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slot",
              "type": "uint256"
            }
          ],
          "internalType": "struct DODOLimitOrder.RfqOrder",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "makerSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "takerSignature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "takerFillAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thresholdMakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "makerTokenFeeAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "taker",
          "type": "address"
        }
      ],
      "name": "matchingRFQByPlatform",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "curTakerFillAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "curMakerFillAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddr",
          "type": "address"
        }
      ],
      "name": "removeAdminList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        }
      ],
      "name": "removeWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9c22aaa8cd1f9f80b748b4f94a2ac09860267ad95f84bd389582ef2346b17062",
  "receipt": {
    "to": null,
    "from": "0xb37136B338C6cC0E459A35fe9Aa036f6b5A147c0",
    "contractAddress": "0x65934e2f228Fde069A6255F46E6A15Bc9DE38545",
    "transactionIndex": 33,
    "gasUsed": "1812809",
    "logsBloom": "0x
    "blockHash": "0x1e7d8ea7ab19f6887170af6c5b32e0ead82a9333d070bde49f6252b3b1ff41cf",
    "transactionHash": "0x9c22aaa8cd1f9f80b748b4f94a2ac09860267ad95f84bd389582ef2346b17062",
    "logs": [],
    "blockNumber": 7425892,
    "cumulativeGasUsed": "14712249",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9e299c46b5bdc8324e828cc93e5863fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddWhileList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeReceiver\",\"type\":\"address\"}],\"name\":\"ChangeFeeReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curTakerFillAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curMakerFillAmount\",\"type\":\"uint256\"}],\"name\":\"LimitOrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curTakerFillAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curMakerFillAmount\",\"type\":\"uint256\"}],\"name\":\"RFQByPlatformFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curTakerFillAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curMakerFillAmount\",\"type\":\"uint256\"}],\"name\":\"RFQByUserFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"RemoveAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"RemoveWhiteList\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ORDER_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RFQ_ORDER_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DODO_APPROVE_PROXY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_FEE_RECEIVER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_FILLED_TAKER_AMOUNT_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_NEW_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_RFQ_FILLED_TAKER_AMOUNT_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"addAdminList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeReceiver\",\"type\":\"address\"}],\"name\":\"changeFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"makerToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct DODOLimitOrder.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"takerFillAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdTakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"takerInteraction\",\"type\":\"bytes\"}],\"name\":\"fillLimitOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"curTakerFillAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"curMakerFillAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dodoApproveProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeReciver\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdminListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"makerToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerTokenFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerFillAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"internalType\":\"struct DODOLimitOrder.RfqOrder\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"makerSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"takerFillAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdMakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerTokenFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"}],\"name\":\"matchingRFQByPlatform\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"curTakerFillAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"curMakerFillAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"removeAdminList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"removeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"DODO Breeder\",\"kind\":\"dev\",\"methods\":{},\"title\":\"DODOLimitOrder\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/DODOLimitOrder.sol\":\"DODOLimitOrder\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"src/DODOLimitOrder.sol\":{\"content\":\"/*\\n    Copyright 2021 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeMath} from \\\"./lib/SafeMath.sol\\\";\\nimport {SafeERC20} from \\\"./lib/SafeERC20.sol\\\";\\nimport {EIP712} from \\\"./external/draft-EIP712.sol\\\";\\nimport {ECDSA} from \\\"./external/ECDSA.sol\\\";\\nimport {IDODOApproveProxy} from \\\"./intf/IDODOApproveProxy.sol\\\";\\nimport {InitializableOwnable} from \\\"./lib/InitializableOwnable.sol\\\";\\nimport \\\"./lib/ArgumentsDecoder.sol\\\";\\n\\n/**\\n * @title DODOLimitOrder\\n * @author DODO Breeder\\n */\\ncontract DODOLimitOrder is EIP712(\\\"DODO Limit Order Protocol\\\", \\\"1\\\"), InitializableOwnable{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using ArgumentsDecoder for bytes;\\n\\n    struct Order {\\n        address makerToken;\\n        address takerToken;\\n        uint256 makerAmount;\\n        uint256 takerAmount;\\n        address maker;\\n        address taker;\\n        uint256 expiration;\\n        uint256 salt;\\n    }\\n\\n    struct RfqOrder {\\n        address makerToken;\\n        address takerToken;\\n        uint256 makerAmount;\\n        uint256 takerAmount;\\n        uint256 makerTokenFeeAmount;\\n        uint256 takerFillAmount;\\n        address maker;\\n        address taker;\\n        uint256 expiration;\\n        uint256 slot;\\n    }\\n\\n    bytes32 constant public ORDER_TYPEHASH = keccak256(\\n        \\\"Order(address makerToken,address takerToken,uint256 makerAmount,uint256 takerAmount,address maker,address taker,uint256 expiration,uint256 salt)\\\"\\n    );\\n\\n    bytes32 constant public RFQ_ORDER_TYPEHASH = keccak256(\\n        \\\"Order(address makerToken,address takerToken,uint256 makerAmount,uint256 takerAmount,uint256 makerTokenFeeAmount,uint256 takerFillAmount,address maker,address taker,uint256 expiration,uint256 slot)\\\"\\n    );\\n\\n\\n    // ============ Storage ============\\n    mapping(bytes32 => uint256) public _FILLED_TAKER_AMOUNT_; //limitOrder\\n    mapping(address => mapping(uint256 => uint256)) public _RFQ_FILLED_TAKER_AMOUNT_; //RFQ\\n    \\n    mapping (address => bool) public isWhiteListed;\\n    mapping (address => bool) public isAdminListed;\\n    address public _DODO_APPROVE_PROXY_;\\n    address public _FEE_RECEIVER_;\\n    \\n    // ============ Events =============\\n    event LimitOrderFilled(address indexed maker, address indexed taker, bytes32 orderHash, uint256 curTakerFillAmount, uint256 curMakerFillAmount);\\n    event RFQByUserFilled(address indexed maker, address indexed taker, bytes32 orderHash, uint256 curTakerFillAmount, uint256 curMakerFillAmount);\\n    event RFQByPlatformFilled(address indexed maker, address indexed taker, bytes32 orderHash, uint256 curTakerFillAmount, uint256 curMakerFillAmount);\\n    event AddWhileList(address addr);\\n    event RemoveWhiteList(address addr);\\n    event AddAdmin(address admin);\\n    event RemoveAdmin(address admin);\\n    event ChangeFeeReceiver(address newFeeReceiver);\\n    \\n    function init(address owner, address dodoApproveProxy, address feeReciver) external {\\n        initOwner(owner);\\n        _DODO_APPROVE_PROXY_ = dodoApproveProxy;\\n        _FEE_RECEIVER_ = feeReciver;\\n    }\\n\\n    // ============= LimitOrder ===============\\n    function fillLimitOrder(\\n        Order memory order,\\n        bytes memory signature,\\n        uint256 takerFillAmount,\\n        uint256 thresholdTakerAmount,\\n        bytes memory takerInteraction\\n    ) public returns(uint256 curTakerFillAmount, uint256 curMakerFillAmount) {\\n        bytes32 orderHash = _orderHash(order);\\n        uint256 filledTakerAmount = _FILLED_TAKER_AMOUNT_[orderHash];\\n\\n        require(filledTakerAmount < order.takerAmount, \\\"DLOP: ALREADY_FILLED\\\");\\n\\n        require(order.taker == msg.sender, \\\"DLOP:PRIVATE_ORDER\\\");\\n\\n        require(ECDSA.recover(orderHash, signature) == order.maker, \\\"DLOP:INVALID_SIGNATURE\\\");\\n        require(order.expiration > block.timestamp, \\\"DLOP: EXPIRE_ORDER\\\");\\n\\n\\n        uint256 leftTakerAmount = order.takerAmount.sub(filledTakerAmount);\\n        curTakerFillAmount = takerFillAmount < leftTakerAmount ? takerFillAmount:leftTakerAmount;\\n        curMakerFillAmount = curTakerFillAmount.mul(order.makerAmount).div(order.takerAmount);\\n\\n        require(curTakerFillAmount > 0 && curMakerFillAmount > 0, \\\"DLOP: ZERO_FILL_INVALID\\\");\\n        require(curTakerFillAmount >= thresholdTakerAmount, \\\"DLOP: FILL_AMOUNT_NOT_ENOUGH\\\");\\n\\n        _FILLED_TAKER_AMOUNT_[orderHash] = filledTakerAmount.add(curTakerFillAmount);\\n\\n        //Maker => Taker\\n        IDODOApproveProxy(_DODO_APPROVE_PROXY_).claimTokens(order.makerToken, order.maker, msg.sender, curMakerFillAmount);\\n\\n        if(takerInteraction.length > 0) {\\n            takerInteraction.patchUint256(0, curTakerFillAmount);\\n            takerInteraction.patchUint256(1, curMakerFillAmount);\\n            require(isWhiteListed[msg.sender], \\\"DLOP: Not Whitelist Contract\\\");\\n            (bool success, ) = msg.sender.call(takerInteraction);\\n            require(success, \\\"DLOP: TAKER_INTERACTIVE_FAILED\\\");\\n        }\\n\\n        //Taker => Maker\\n        IERC20(order.takerToken).safeTransferFrom(msg.sender, order.maker, curTakerFillAmount);\\n\\n        emit LimitOrderFilled(order.maker, msg.sender, orderHash, curTakerFillAmount, curMakerFillAmount);\\n    }\\n\\n\\n    //================ RFQ ================\\n    function matchingRFQByPlatform(\\n        RfqOrder memory order,\\n        bytes memory makerSignature,\\n        bytes memory takerSignature,\\n        uint256 takerFillAmount,\\n        uint256 thresholdMakerAmount,\\n        uint256 makerTokenFeeAmount,\\n        address taker\\n    ) public returns(uint256 curTakerFillAmount, uint256 curMakerFillAmount) {\\n        require(isAdminListed[msg.sender], \\\"ACCESS_DENIED\\\");\\n        uint256 filledTakerAmount = _RFQ_FILLED_TAKER_AMOUNT_[order.maker][order.slot];\\n        require(filledTakerAmount < order.takerAmount, \\\"DLOP: ALREADY_FILLED\\\");\\n\\n        bytes32 orderHashForMaker = _rfqOrderHash(order);\\n        require(ECDSA.recover(orderHashForMaker, makerSignature) == order.maker, \\\"DLOP:INVALID_MAKER_SIGNATURE\\\");\\n        require(order.taker == address(0), \\\"DLOP:TAKER_INVALID\\\");\\n\\n        order.taker = taker;\\n        order.makerTokenFeeAmount = makerTokenFeeAmount;\\n        order.takerFillAmount = takerFillAmount;\\n\\n        bytes32 orderHashForTaker = _rfqOrderHash(order);\\n        require(ECDSA.recover(orderHashForTaker, takerSignature) == taker, \\\"DLOP:INVALID_TAKER_SIGNATURE\\\");\\n\\n        (curTakerFillAmount, curMakerFillAmount) = _settleRFQ(order,filledTakerAmount,takerFillAmount,thresholdMakerAmount,taker);\\n        \\n        emit RFQByPlatformFilled(order.maker, taker, orderHashForMaker, curTakerFillAmount, curMakerFillAmount);\\n    }\\n\\n    //============  Ownable ============\\n    function addWhiteList (address contractAddr) public onlyOwner {\\n        isWhiteListed[contractAddr] = true;\\n        emit AddWhileList(contractAddr);\\n    }\\n\\n    function removeWhiteList (address contractAddr) public onlyOwner {\\n        isWhiteListed[contractAddr] = false;\\n        emit RemoveWhiteList(contractAddr);\\n    }\\n\\n    function addAdminList (address userAddr) external onlyOwner {\\n        isAdminListed[userAddr] = true;\\n        emit AddAdmin(userAddr);\\n    }\\n\\n    function removeAdminList (address userAddr) external onlyOwner {\\n        isAdminListed[userAddr] = false;\\n        emit RemoveAdmin(userAddr);\\n    }\\n\\n    function changeFeeReceiver (address newFeeReceiver) public onlyOwner {\\n        _FEE_RECEIVER_ = newFeeReceiver;\\n        emit ChangeFeeReceiver(newFeeReceiver);\\n    }\\n\\n    //============  internal ============\\n    function _settleRFQ(\\n        RfqOrder memory order,\\n        uint256 filledTakerAmount,\\n        uint256 takerFillAmount,\\n        uint256 thresholdMakerAmount,\\n        address taker\\n    ) internal returns(uint256,uint256) {\\n        require(order.expiration > block.timestamp, \\\"DLOP: EXPIRE_ORDER\\\");\\n\\n        uint256 leftTakerAmount = order.takerAmount.sub(filledTakerAmount);\\n        require(takerFillAmount <= leftTakerAmount, \\\"DLOP: RFQ_TAKER_AMOUNT_NOT_ENOUGH\\\");\\n        \\n        uint256 curTakerFillAmount = takerFillAmount;\\n        uint256 curMakerFillAmount = curTakerFillAmount.mul(order.makerAmount).div(order.takerAmount);\\n\\n        require(curTakerFillAmount > 0 && curMakerFillAmount > 0, \\\"DLOP: ZERO_FILL_INVALID\\\");\\n        require(curMakerFillAmount.sub(order.makerTokenFeeAmount) >= thresholdMakerAmount, \\\"DLOP: FILL_AMOUNT_NOT_ENOUGH\\\");\\n\\n        _RFQ_FILLED_TAKER_AMOUNT_[order.maker][order.slot] = filledTakerAmount.add(curTakerFillAmount);\\n\\n        if(order.makerTokenFeeAmount > 0) {\\n            IDODOApproveProxy(_DODO_APPROVE_PROXY_).claimTokens(order.makerToken, order.maker, _FEE_RECEIVER_, order.makerTokenFeeAmount);\\n        }\\n        //Maker => Taker\\n        IDODOApproveProxy(_DODO_APPROVE_PROXY_).claimTokens(order.makerToken, order.maker, taker, curMakerFillAmount.sub(order.makerTokenFeeAmount));\\n        //Taker => Maker\\n        IDODOApproveProxy(_DODO_APPROVE_PROXY_).claimTokens(order.takerToken, taker, order.maker, curTakerFillAmount);\\n\\n        return (curTakerFillAmount, curMakerFillAmount);\\n    }\\n\\n\\n    function _orderHash(Order memory order) private view returns(bytes32) {\\n        return _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    ORDER_TYPEHASH,\\n                    order.makerToken,\\n                    order.takerToken,\\n                    order.makerAmount,\\n                    order.takerAmount,\\n                    order.maker,\\n                    order.taker,\\n                    order.expiration,\\n                    order.salt\\n                )\\n            )\\n        );\\n    }\\n\\n    function _rfqOrderHash(RfqOrder memory order) private view returns(bytes32) {\\n        return _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    RFQ_ORDER_TYPEHASH,\\n                    order.makerToken,\\n                    order.takerToken,\\n                    order.makerAmount,\\n                    order.takerAmount,\\n                    order.makerTokenFeeAmount,\\n                    order.takerFillAmount,\\n                    order.maker,\\n                    order.taker,\\n                    order.expiration,\\n                    order.slot\\n                )\\n            )\\n        );\\n    }\\n}\",\"keccak256\":\"0xfdb16fcb89242e662e62abb4809e8b8a428e547cec1c1c8bdadbfd667c755ba7\",\"license\":\"Apache-2.0\"},\"src/external/ECDSA.sol\":{\"content\":\"// This is a file copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.2.0/contracts/utils/cryptography/ECDSA.sol\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return recover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return recover(hash, r, vs);\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x203fa6ea1411e9a1e4038740fd883f0df0963dad8ab282cafbc35c80b8320edb\",\"license\":\"MIT\"},\"src/external/draft-EIP712.sol\":{\"content\":\"// This is a file copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.2.0/contracts/utils/cryptography/draft-EIP712.sol\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\",\"keccak256\":\"0x497855410bbeffca2428bebe7cedb74ffd2a944c65b6a96bb0296ac60eff3c7e\",\"license\":\"MIT\"},\"src/intf/IDODOApproveProxy.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity 0.8.4;\\n\\ninterface IDODOApproveProxy {\\n    function claimTokens(address token,address who,address dest,uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x3c04e33703c073994cd2f4c6805aacc9f91ba76f706160f1c788091d62651651\",\"license\":\"Apache-2.0\"},\"src/lib/ArgumentsDecoder.sol\":{\"content\":\"/*\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.4;\\n\\nlibrary ArgumentsDecoder {\\n    function decodeSelector(bytes memory data) internal pure returns(bytes4 selector) {\\n        assembly { // solhint-disable-line no-inline-assembly\\n            selector := mload(add(data, 0x20))\\n        }\\n    }\\n\\n    function decodeAddress(bytes memory data, uint256 argumentIndex) internal pure returns(address account) {\\n        assembly { // solhint-disable-line no-inline-assembly\\n            account := mload(add(add(data, 0x24), mul(argumentIndex, 0x20)))\\n        }\\n    }\\n\\n    function decodeUint256(bytes memory data, uint256 argumentIndex) internal pure returns(uint256 value) {\\n        assembly { // solhint-disable-line no-inline-assembly\\n            value := mload(add(add(data, 0x24), mul(argumentIndex, 0x20)))\\n        }\\n    }\\n\\n    function patchAddress(bytes memory data, uint256 argumentIndex, address account) internal pure {\\n        assembly { // solhint-disable-line no-inline-assembly\\n            mstore(add(add(data, 0x24), mul(argumentIndex, 0x20)), account)\\n        }\\n    }\\n\\n    function patchUint256(bytes memory data, uint256 argumentIndex, uint256 value) internal pure {\\n        assembly { // solhint-disable-line no-inline-assembly\\n            mstore(add(add(data, 0x24), mul(argumentIndex, 0x20)), value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6172bdb32caa02eed3fe3a9f29bad21bf9f07d9d7bce829c9e0f1ccba0b9a7eb\",\"license\":\"Apache-2.0\"},\"src/lib/InitializableOwnable.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title Ownable\\n * @author DODO Breeder\\n *\\n * @notice Ownership related functions\\n */\\ncontract InitializableOwnable {\\n    address public _OWNER_;\\n    address public _NEW_OWNER_;\\n    bool internal _INITIALIZED_;\\n\\n    // ============ Events ============\\n\\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    // ============ Modifiers ============\\n\\n    modifier notInitialized() {\\n        require(!_INITIALIZED_, \\\"DODO_INITIALIZED\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == _OWNER_, \\\"NOT_OWNER\\\");\\n        _;\\n    }\\n\\n    // ============ Functions ============\\n\\n    function initOwner(address newOwner) public notInitialized {\\n        _INITIALIZED_ = true;\\n        _OWNER_ = newOwner;\\n    }\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\\n        _NEW_OWNER_ = newOwner;\\n    }\\n\\n    function claimOwnership() public {\\n        require(msg.sender == _NEW_OWNER_, \\\"INVALID_CLAIM\\\");\\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\\n        _OWNER_ = _NEW_OWNER_;\\n        _NEW_OWNER_ = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x30c3f0690a4e66d35f52972a441566644ae1e0d1c5bef2036436562637db9a23\",\"license\":\"Apache-2.0\"},\"src/lib/SafeERC20.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n    This is a simplified version of OpenZepplin's SafeERC20 library\\n\\n*/\\n\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa05fad82feb4ca42a16b42a6a2ea2b12122761a328b29632d63f47813806750b\",\"license\":\"Apache-2.0\"},\"src/lib/SafeMath.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\n\\n/**\\n * @title SafeMath\\n * @author DODO Breeder\\n *\\n * @notice Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"MUL_ERROR\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"DIVIDING_ERROR\\\");\\n        return a / b;\\n    }\\n\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 quotient = div(a, b);\\n        uint256 remainder = a - quotient * b;\\n        if (remainder > 0) {\\n            return quotient + 1;\\n        } else {\\n            return quotient;\\n        }\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SUB_ERROR\\\");\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ADD_ERROR\\\");\\n        return c;\\n    }\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\\n        uint256 z = x / 2 + 1;\\n        y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x66ce291455c6a244d3cbb85df07d36802293bb2c4d112f6cecb91d6bcc105b05\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x61012060405234801561001157600080fd5b50604080518082018252601981527f444f444f204c696d6974204f726465722050726f746f636f6c0000000000000060208083019182528351808501855260018152603160f81b908201529151902060c08181527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660e08190524660a081815286517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818801819052818901969096526060810193909352608080840192909252308382015286518084039091018152919092019094528351939092019290922090526101005260805160a05160c05160e05161010051611fc561013c60003960006119f401526000611a4301526000611a1e015260006119a2015260006119cb0152611fc56000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80637161e0f2116100b8578063d9df05cf1161007c578063d9df05cf146102f9578063e7cd4a041461030c578063eb99be121461031f578063f2fde38b14610332578063f973a20914610345578063fd8bd8491461036c57600080fd5b80637161e0f2146102855780637c08b964146102985780638456db15146102ab578063a4d31e2e146102be578063ae52aae7146102e657600080fd5b80632042e5c2116100ff5780632042e5c2146101f55780633b11fffa146102085780633f45e230146102335780634e71e0c81461025a5780636f9170f61461026257600080fd5b80630d0092971461013c5780631068705b1461015157806316048bc4146101845780631822c0c0146101af578063184b9559146101e2575b600080fd5b61014f61014a366004611b34565b61037f565b005b61017161015f366004611bd9565b60026020526000908152604090205481565b6040519081526020015b60405180910390f35b600054610197906001600160a01b031681565b6040516001600160a01b03909116815260200161017b565b6101d26101bd366004611b34565b60056020526000908152604090205460ff1681565b604051901515815260200161017b565b61014f6101f0366004611b4e565b610407565b61014f610203366004611b34565b61043f565b610171610216366004611b90565b600360209081526000928352604080842090915290825290205481565b6101717f621f3db621de9f3f54820b129b0a28203499510cf968b4cd9a1155cce12e41d181565b61014f6104c1565b6101d2610270366004611b34565b60046020526000908152604090205460ff1681565b600754610197906001600160a01b031681565b61014f6102a6366004611b34565b61056f565b600154610197906001600160a01b031681565b6102d16102cc366004611cf0565b6105e7565b6040805192835260208301919091520161017b565b61014f6102f4366004611b34565b610885565b6102d1610307366004611bf1565b610903565b61014f61031a366004611b34565b610d97565b600654610197906001600160a01b031681565b61014f610340366004611b34565b610e15565b6101717f9e31ac2990003b5142f3966f6d93f8ee4befc60049bcd8504dce6d014d939c8a81565b61014f61037a366004611b34565b610e9a565b600154600160a01b900460ff16156103d15760405162461bcd60e51b815260206004820152601060248201526f1113d113d7d25392551250531256915160821b60448201526064015b60405180910390fd5b6001805460ff60a01b1916600160a01b179055600080546001600160a01b039092166001600160a01b0319909216919091179055565b6104108361037f565b600680546001600160a01b039384166001600160a01b0319918216179091556007805492909316911617905550565b6000546001600160a01b031633146104695760405162461bcd60e51b81526004016103c890611e84565b6001600160a01b038116600081815260046020908152604091829020805460ff1916905590519182527f1e17ee0599b7c09bb1d0ff1e8086007909da8bfba5c7d18319cb558e66db37ee91015b60405180910390a150565b6001546001600160a01b0316331461050b5760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f434c41494d60981b60448201526064016103c8565b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b6000546001600160a01b031633146105995760405162461bcd60e51b81526004016103c890611e84565b600780546001600160a01b0319166001600160a01b0383169081179091556040519081527ffb29108df6ec24f97dfbe39fff6bb9357a54e758efed2c6e7b5fb76b26b30f81906020016104b6565b33600090815260056020526040812054819060ff166106385760405162461bcd60e51b815260206004820152600d60248201526c1050d0d154d4d7d11153925151609a1b60448201526064016103c8565b60c08901516001600160a01b031660009081526003602090815260408083206101208d0151845290915290205460608a015181106106af5760405162461bcd60e51b8152602060048201526014602482015273111313d40e881053149150511657d1925313115160621b60448201526064016103c8565b60006106ba8b610f15565b90508a60c001516001600160a01b03166106d4828c611003565b6001600160a01b03161461072a5760405162461bcd60e51b815260206004820152601c60248201527f444c4f503a494e56414c49445f4d414b45525f5349474e41545552450000000060448201526064016103c8565b60e08b01516001600160a01b03161561077a5760405162461bcd60e51b8152602060048201526012602482015271111313d40e951052d15497d253959053125160721b60448201526064016103c8565b6001600160a01b03851660e08c015260808b0186905260a08b0188905260006107a28c610f15565b9050856001600160a01b03166107b8828c611003565b6001600160a01b03161461080e5760405162461bcd60e51b815260206004820152601c60248201527f444c4f503a494e56414c49445f54414b45525f5349474e41545552450000000060448201526064016103c8565b61081b8c848b8b8a6110a7565b60c08e015160408051868152602081018590529081018390529297509095506001600160a01b03808916929116907f20f056d2630312ff7f9fa56edcc34b2221f2f78fc7b4cd961559be1bbd759d0d9060600160405180910390a350505097509795505050505050565b6000546001600160a01b031633146108af5760405162461bcd60e51b81526004016103c890611e84565b6001600160a01b038116600081815260056020908152604091829020805460ff1916600117905590519182527fad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba91016104b6565b6000806000610911886113fd565b60008181526002602052604090205460608a015191925090811061096e5760405162461bcd60e51b8152602060048201526014602482015273111313d40e881053149150511657d1925313115160621b60448201526064016103c8565b60a08901516001600160a01b031633146109bf5760405162461bcd60e51b8152602060048201526012602482015271222627a81d282924ab20aa22afa7a92222a960711b60448201526064016103c8565b88608001516001600160a01b03166109d7838a611003565b6001600160a01b031614610a265760405162461bcd60e51b8152602060048201526016602482015275444c4f503a494e56414c49445f5349474e415455524560501b60448201526064016103c8565b428960c0015111610a6e5760405162461bcd60e51b8152602060048201526012602482015271222627a81d1022ac2824a922afa7a92222a960711b60448201526064016103c8565b6060890151600090610a8090836114ad565b9050808810610a8f5780610a91565b875b9450610ab88a60600151610ab28c60400151886114fc90919063ffffffff16565b9061155d565b9350600085118015610aca5750600084115b610b105760405162461bcd60e51b8152602060048201526017602482015276111313d40e8816915493d7d192531317d2539590531251604a1b60448201526064016103c8565b86851015610b605760405162461bcd60e51b815260206004820152601c60248201527f444c4f503a2046494c4c5f414d4f554e545f4e4f545f454e4f5547480000000060448201526064016103c8565b610b6a82866115a9565b60008481526002602052604090819020919091556006548b5160808d0151925163052f523360e11b81526001600160a01b0390921692630a5ea46692610bb892919033908a90600401611e5a565b600060405180830381600087803b158015610bd257600080fd5b505af1158015610be6573d6000803e3d6000fd5b50505050600086511115610d105760248601859052604486018490523360009081526004602052604090205460ff16610c615760405162461bcd60e51b815260206004820152601c60248201527f444c4f503a204e6f742057686974656c69737420436f6e74726163740000000060448201526064016103c8565b6000336001600160a01b031687604051610c7b9190611e21565b6000604051808303816000865af19150503d8060008114610cb8576040519150601f19603f3d011682016040523d82523d6000602084013e610cbd565b606091505b5050905080610d0e5760405162461bcd60e51b815260206004820152601e60248201527f444c4f503a2054414b45525f494e5445524143544956455f4641494c4544000060448201526064016103c8565b505b610d38338b60800151878d602001516001600160a01b03166115f4909392919063ffffffff16565b60808a0151604080518581526020810188905290810186905233916001600160a01b0316907f30a60b21c24c8f631a1e032527b3ee9a12b7e1fce164b4273c40f5db964152459060600160405180910390a35050509550959350505050565b6000546001600160a01b03163314610dc15760405162461bcd60e51b81526004016103c890611e84565b6001600160a01b038116600081815260046020908152604091829020805460ff1916600117905590519182527ffb1e3b3e7fb68c870fdd34471e2402d26abb27eed56fac2801ad0953859db87191016104b6565b6000546001600160a01b03163314610e3f5760405162461bcd60e51b81526004016103c890611e84565b600080546040516001600160a01b03808516939216917fdcf55418cee3220104fef63f979ff3c4097ad240c0c43dcb33ce837748983e6291a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610ec45760405162461bcd60e51b81526004016103c890611e84565b6001600160a01b038116600081815260056020908152604091829020805460ff1916905590519182527f753f40ca3312b2408759a67875b367955e7baa221daf08aa3d643d96202ac12b91016104b6565b6000610ffd7f621f3db621de9f3f54820b129b0a28203499510cf968b4cd9a1155cce12e41d1836000015184602001518560400151866060015187608001518860a001518960c001518a60e001518b61010001518c6101200151604051602001610fe29b9a999897969594939291909a8b526001600160a01b03998a1660208c015297891660408b015260608a0196909652608089019490945260a088019290925260c0870152841660e08601529092166101008401526101208301919091526101408201526101600190565b60405160208183030381529060405280519060200120611654565b92915050565b60008151604114156110375760208201516040830151606084015160001a61102d868285856116a2565b9350505050610ffd565b81516040141561105f576020820151604083015161105685838361184b565b92505050610ffd565b60405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016103c8565b60008042876101000151116110f35760405162461bcd60e51b8152602060048201526012602482015271222627a81d1022ac2824a922afa7a92222a960711b60448201526064016103c8565b606087015160009061110590886114ad565b9050808611156111615760405162461bcd60e51b815260206004820152602160248201527f444c4f503a205246515f54414b45525f414d4f554e545f4e4f545f454e4f55476044820152600960fb1b60648201526084016103c8565b600086905060006111878a60600151610ab28c60400151856114fc90919063ffffffff16565b90506000821180156111995750600081115b6111df5760405162461bcd60e51b8152602060048201526017602482015276111313d40e8816915493d7d192531317d2539590531251604a1b60448201526064016103c8565b866111f78b60800151836114ad90919063ffffffff16565b10156112455760405162461bcd60e51b815260206004820152601c60248201527f444c4f503a2046494c4c5f414d4f554e545f4e4f545f454e4f5547480000000060448201526064016103c8565b61124f89836115a9565b60c08b01516001600160a01b031660009081526003602090815260408083206101208f0151845290915290205560808a0151156112fd576006548a5160c08c015160075460808e015160405163052f523360e11b81526001600160a01b0395861695630a5ea466956112ca9590949093911691600401611e5a565b600060405180830381600087803b1580156112e457600080fd5b505af11580156112f8573d6000803e3d6000fd5b505050505b6006548a5160c08c015160808d01516001600160a01b0390931692630a5ea4669291908a9061132d9087906114ad565b6040518563ffffffff1660e01b815260040161134c9493929190611e5a565b600060405180830381600087803b15801561136657600080fd5b505af115801561137a573d6000803e3d6000fd5b505060065460208d015160c08e015160405163052f523360e11b81526001600160a01b039093169450630a5ea46693506113bb928b91908890600401611e5a565b600060405180830381600087803b1580156113d557600080fd5b505af11580156113e9573d6000803e3d6000fd5b50939c929b50919950505050505050505050565b6000610ffd7f9e31ac2990003b5142f3966f6d93f8ee4befc60049bcd8504dce6d014d939c8a836000015184602001518560400151866060015187608001518860a001518960c001518a60e00151604051602001610fe2999897969594939291909889526001600160a01b0397881660208a0152958716604089015260608801949094526080870192909252841660a086015290921660c084015260e08301919091526101008201526101200190565b6000828211156114eb5760405162461bcd60e51b815260206004820152600960248201526829aaa12fa2a92927a960b91b60448201526064016103c8565b6114f58284611f4c565b9392505050565b60008261150b57506000610ffd565b60006115178385611f2d565b9050826115248583611f0d565b146114f55760405162461bcd60e51b815260206004820152600960248201526826aaa62fa2a92927a960b91b60448201526064016103c8565b600080821161159f5760405162461bcd60e51b815260206004820152600e60248201526d2224ab24a224a723afa2a92927a960911b60448201526064016103c8565b6114f58284611f0d565b6000806115b68385611ef5565b9050838110156114f55760405162461bcd60e51b815260206004820152600960248201526820a2222fa2a92927a960b91b60448201526064016103c8565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261164e908590611875565b50505050565b6000610ffd61166161199e565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561171f5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016103c8565b8360ff16601b148061173457508360ff16601c145b61178b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016103c8565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa1580156117df573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166118425760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016103c8565b95945050505050565b60006001600160ff1b03821660ff83901c601b0161186b868287856116a2565b9695505050505050565b600080836001600160a01b0316836040516118909190611e21565b6000604051808303816000865af19150503d80600081146118cd576040519150601f19603f3d011682016040523d82523d6000602084013e6118d2565b606091505b5091509150816119245760405162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460448201526064016103c8565b80511561164e578080602001905181019061193f9190611bb9565b61164e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103c8565b60007f00000000000000000000000000000000000000000000000000000000000000004614156119ed57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b80356001600160a01b0381168114611aa857600080fd5b919050565b600082601f830112611abd578081fd5b813567ffffffffffffffff80821115611ad857611ad8611f79565b604051601f8301601f19908116603f01168101908282118183101715611b0057611b00611f79565b81604052838152866020858801011115611b18578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215611b45578081fd5b6114f582611a91565b600080600060608486031215611b62578182fd5b611b6b84611a91565b9250611b7960208501611a91565b9150611b8760408501611a91565b90509250925092565b60008060408385031215611ba2578182fd5b611bab83611a91565b946020939093013593505050565b600060208284031215611bca578081fd5b815180151581146114f5578182fd5b600060208284031215611bea578081fd5b5035919050565b6000806000806000858703610180811215611c0a578182fd5b61010080821215611c19578283fd5b611c21611ea7565b9150611c2c88611a91565b8252611c3a60208901611a91565b60208301526040880135604083015260608801356060830152611c5f60808901611a91565b6080830152611c7060a08901611a91565b60a083015260c0888101359083015260e0808901359083015290955086013567ffffffffffffffff80821115611ca4578283fd5b611cb089838a01611aad565b955061012088013594506101408801359350610160880135915080821115611cd6578283fd5b50611ce388828901611aad565b9150509295509295909350565b6000806000806000806000878903610200811215611d0c578283fd5b61014080821215611d1b578384fd5b611d23611ed1565b9150611d2e8a611a91565b8252611d3c60208b01611a91565b602083015260408a0135604083015260608a0135606083015260808a0135608083015260a08a013560a0830152611d7560c08b01611a91565b60c0830152611d8660e08b01611a91565b60e08301526101008a81013590830152610120808b01359083015290975088013567ffffffffffffffff80821115611dbc578384fd5b611dc88b838c01611aad565b97506101608a0135915080821115611dde578384fd5b50611deb8a828b01611aad565b95505061018088013593506101a088013592506101c08801359150611e136101e08901611a91565b905092959891949750929550565b60008251815b81811015611e415760208186018101518583015201611e27565b81811115611e4f5782828501525b509190910192915050565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6020808252600990820152682727aa2fa7aba722a960b91b604082015260600190565b604051610100810167ffffffffffffffff81118282101715611ecb57611ecb611f79565b60405290565b604051610140810167ffffffffffffffff81118282101715611ecb57611ecb611f79565b60008219821115611f0857611f08611f63565b500190565b600082611f2857634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611f4757611f47611f63565b500290565b600082821015611f5e57611f5e611f63565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212200b74c448c67e6a27559774a3621fd29894e4d0d6d575dae4e98fc2d2afbb77a164736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80637161e0f2116100b8578063d9df05cf1161007c578063d9df05cf146102f9578063e7cd4a041461030c578063eb99be121461031f578063f2fde38b14610332578063f973a20914610345578063fd8bd8491461036c57600080fd5b80637161e0f2146102855780637c08b964146102985780638456db15146102ab578063a4d31e2e146102be578063ae52aae7146102e657600080fd5b80632042e5c2116100ff5780632042e5c2146101f55780633b11fffa146102085780633f45e230146102335780634e71e0c81461025a5780636f9170f61461026257600080fd5b80630d0092971461013c5780631068705b1461015157806316048bc4146101845780631822c0c0146101af578063184b9559146101e2575b600080fd5b61014f61014a366004611b34565b61037f565b005b61017161015f366004611bd9565b60026020526000908152604090205481565b6040519081526020015b60405180910390f35b600054610197906001600160a01b031681565b6040516001600160a01b03909116815260200161017b565b6101d26101bd366004611b34565b60056020526000908152604090205460ff1681565b604051901515815260200161017b565b61014f6101f0366004611b4e565b610407565b61014f610203366004611b34565b61043f565b610171610216366004611b90565b600360209081526000928352604080842090915290825290205481565b6101717f621f3db621de9f3f54820b129b0a28203499510cf968b4cd9a1155cce12e41d181565b61014f6104c1565b6101d2610270366004611b34565b60046020526000908152604090205460ff1681565b600754610197906001600160a01b031681565b61014f6102a6366004611b34565b61056f565b600154610197906001600160a01b031681565b6102d16102cc366004611cf0565b6105e7565b6040805192835260208301919091520161017b565b61014f6102f4366004611b34565b610885565b6102d1610307366004611bf1565b610903565b61014f61031a366004611b34565b610d97565b600654610197906001600160a01b031681565b61014f610340366004611b34565b610e15565b6101717f9e31ac2990003b5142f3966f6d93f8ee4befc60049bcd8504dce6d014d939c8a81565b61014f61037a366004611b34565b610e9a565b600154600160a01b900460ff16156103d15760405162461bcd60e51b815260206004820152601060248201526f1113d113d7d25392551250531256915160821b60448201526064015b60405180910390fd5b6001805460ff60a01b1916600160a01b179055600080546001600160a01b039092166001600160a01b0319909216919091179055565b6104108361037f565b600680546001600160a01b039384166001600160a01b0319918216179091556007805492909316911617905550565b6000546001600160a01b031633146104695760405162461bcd60e51b81526004016103c890611e84565b6001600160a01b038116600081815260046020908152604091829020805460ff1916905590519182527f1e17ee0599b7c09bb1d0ff1e8086007909da8bfba5c7d18319cb558e66db37ee91015b60405180910390a150565b6001546001600160a01b0316331461050b5760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f434c41494d60981b60448201526064016103c8565b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b6000546001600160a01b031633146105995760405162461bcd60e51b81526004016103c890611e84565b600780546001600160a01b0319166001600160a01b0383169081179091556040519081527ffb29108df6ec24f97dfbe39fff6bb9357a54e758efed2c6e7b5fb76b26b30f81906020016104b6565b33600090815260056020526040812054819060ff166106385760405162461bcd60e51b815260206004820152600d60248201526c1050d0d154d4d7d11153925151609a1b60448201526064016103c8565b60c08901516001600160a01b031660009081526003602090815260408083206101208d0151845290915290205460608a015181106106af5760405162461bcd60e51b8152602060048201526014602482015273111313d40e881053149150511657d1925313115160621b60448201526064016103c8565b60006106ba8b610f15565b90508a60c001516001600160a01b03166106d4828c611003565b6001600160a01b03161461072a5760405162461bcd60e51b815260206004820152601c60248201527f444c4f503a494e56414c49445f4d414b45525f5349474e41545552450000000060448201526064016103c8565b60e08b01516001600160a01b03161561077a5760405162461bcd60e51b8152602060048201526012602482015271111313d40e951052d15497d253959053125160721b60448201526064016103c8565b6001600160a01b03851660e08c015260808b0186905260a08b0188905260006107a28c610f15565b9050856001600160a01b03166107b8828c611003565b6001600160a01b03161461080e5760405162461bcd60e51b815260206004820152601c60248201527f444c4f503a494e56414c49445f54414b45525f5349474e41545552450000000060448201526064016103c8565b61081b8c848b8b8a6110a7565b60c08e015160408051868152602081018590529081018390529297509095506001600160a01b03808916929116907f20f056d2630312ff7f9fa56edcc34b2221f2f78fc7b4cd961559be1bbd759d0d9060600160405180910390a350505097509795505050505050565b6000546001600160a01b031633146108af5760405162461bcd60e51b81526004016103c890611e84565b6001600160a01b038116600081815260056020908152604091829020805460ff1916600117905590519182527fad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba91016104b6565b6000806000610911886113fd565b60008181526002602052604090205460608a015191925090811061096e5760405162461bcd60e51b8152602060048201526014602482015273111313d40e881053149150511657d1925313115160621b60448201526064016103c8565b60a08901516001600160a01b031633146109bf5760405162461bcd60e51b8152602060048201526012602482015271222627a81d282924ab20aa22afa7a92222a960711b60448201526064016103c8565b88608001516001600160a01b03166109d7838a611003565b6001600160a01b031614610a265760405162461bcd60e51b8152602060048201526016602482015275444c4f503a494e56414c49445f5349474e415455524560501b60448201526064016103c8565b428960c0015111610a6e5760405162461bcd60e51b8152602060048201526012602482015271222627a81d1022ac2824a922afa7a92222a960711b60448201526064016103c8565b6060890151600090610a8090836114ad565b9050808810610a8f5780610a91565b875b9450610ab88a60600151610ab28c60400151886114fc90919063ffffffff16565b9061155d565b9350600085118015610aca5750600084115b610b105760405162461bcd60e51b8152602060048201526017602482015276111313d40e8816915493d7d192531317d2539590531251604a1b60448201526064016103c8565b86851015610b605760405162461bcd60e51b815260206004820152601c60248201527f444c4f503a2046494c4c5f414d4f554e545f4e4f545f454e4f5547480000000060448201526064016103c8565b610b6a82866115a9565b60008481526002602052604090819020919091556006548b5160808d0151925163052f523360e11b81526001600160a01b0390921692630a5ea46692610bb892919033908a90600401611e5a565b600060405180830381600087803b158015610bd257600080fd5b505af1158015610be6573d6000803e3d6000fd5b50505050600086511115610d105760248601859052604486018490523360009081526004602052604090205460ff16610c615760405162461bcd60e51b815260206004820152601c60248201527f444c4f503a204e6f742057686974656c69737420436f6e74726163740000000060448201526064016103c8565b6000336001600160a01b031687604051610c7b9190611e21565b6000604051808303816000865af19150503d8060008114610cb8576040519150601f19603f3d011682016040523d82523d6000602084013e610cbd565b606091505b5050905080610d0e5760405162461bcd60e51b815260206004820152601e60248201527f444c4f503a2054414b45525f494e5445524143544956455f4641494c4544000060448201526064016103c8565b505b610d38338b60800151878d602001516001600160a01b03166115f4909392919063ffffffff16565b60808a0151604080518581526020810188905290810186905233916001600160a01b0316907f30a60b21c24c8f631a1e032527b3ee9a12b7e1fce164b4273c40f5db964152459060600160405180910390a35050509550959350505050565b6000546001600160a01b03163314610dc15760405162461bcd60e51b81526004016103c890611e84565b6001600160a01b038116600081815260046020908152604091829020805460ff1916600117905590519182527ffb1e3b3e7fb68c870fdd34471e2402d26abb27eed56fac2801ad0953859db87191016104b6565b6000546001600160a01b03163314610e3f5760405162461bcd60e51b81526004016103c890611e84565b600080546040516001600160a01b03808516939216917fdcf55418cee3220104fef63f979ff3c4097ad240c0c43dcb33ce837748983e6291a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610ec45760405162461bcd60e51b81526004016103c890611e84565b6001600160a01b038116600081815260056020908152604091829020805460ff1916905590519182527f753f40ca3312b2408759a67875b367955e7baa221daf08aa3d643d96202ac12b91016104b6565b6000610ffd7f621f3db621de9f3f54820b129b0a28203499510cf968b4cd9a1155cce12e41d1836000015184602001518560400151866060015187608001518860a001518960c001518a60e001518b61010001518c6101200151604051602001610fe29b9a999897969594939291909a8b526001600160a01b03998a1660208c015297891660408b015260608a0196909652608089019490945260a088019290925260c0870152841660e08601529092166101008401526101208301919091526101408201526101600190565b60405160208183030381529060405280519060200120611654565b92915050565b60008151604114156110375760208201516040830151606084015160001a61102d868285856116a2565b9350505050610ffd565b81516040141561105f576020820151604083015161105685838361184b565b92505050610ffd565b60405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016103c8565b60008042876101000151116110f35760405162461bcd60e51b8152602060048201526012602482015271222627a81d1022ac2824a922afa7a92222a960711b60448201526064016103c8565b606087015160009061110590886114ad565b9050808611156111615760405162461bcd60e51b815260206004820152602160248201527f444c4f503a205246515f54414b45525f414d4f554e545f4e4f545f454e4f55476044820152600960fb1b60648201526084016103c8565b600086905060006111878a60600151610ab28c60400151856114fc90919063ffffffff16565b90506000821180156111995750600081115b6111df5760405162461bcd60e51b8152602060048201526017602482015276111313d40e8816915493d7d192531317d2539590531251604a1b60448201526064016103c8565b866111f78b60800151836114ad90919063ffffffff16565b10156112455760405162461bcd60e51b815260206004820152601c60248201527f444c4f503a2046494c4c5f414d4f554e545f4e4f545f454e4f5547480000000060448201526064016103c8565b61124f89836115a9565b60c08b01516001600160a01b031660009081526003602090815260408083206101208f0151845290915290205560808a0151156112fd576006548a5160c08c015160075460808e015160405163052f523360e11b81526001600160a01b0395861695630a5ea466956112ca9590949093911691600401611e5a565b600060405180830381600087803b1580156112e457600080fd5b505af11580156112f8573d6000803e3d6000fd5b505050505b6006548a5160c08c015160808d01516001600160a01b0390931692630a5ea4669291908a9061132d9087906114ad565b6040518563ffffffff1660e01b815260040161134c9493929190611e5a565b600060405180830381600087803b15801561136657600080fd5b505af115801561137a573d6000803e3d6000fd5b505060065460208d015160c08e015160405163052f523360e11b81526001600160a01b039093169450630a5ea46693506113bb928b91908890600401611e5a565b600060405180830381600087803b1580156113d557600080fd5b505af11580156113e9573d6000803e3d6000fd5b50939c929b50919950505050505050505050565b6000610ffd7f9e31ac2990003b5142f3966f6d93f8ee4befc60049bcd8504dce6d014d939c8a836000015184602001518560400151866060015187608001518860a001518960c001518a60e00151604051602001610fe2999897969594939291909889526001600160a01b0397881660208a0152958716604089015260608801949094526080870192909252841660a086015290921660c084015260e08301919091526101008201526101200190565b6000828211156114eb5760405162461bcd60e51b815260206004820152600960248201526829aaa12fa2a92927a960b91b60448201526064016103c8565b6114f58284611f4c565b9392505050565b60008261150b57506000610ffd565b60006115178385611f2d565b9050826115248583611f0d565b146114f55760405162461bcd60e51b815260206004820152600960248201526826aaa62fa2a92927a960b91b60448201526064016103c8565b600080821161159f5760405162461bcd60e51b815260206004820152600e60248201526d2224ab24a224a723afa2a92927a960911b60448201526064016103c8565b6114f58284611f0d565b6000806115b68385611ef5565b9050838110156114f55760405162461bcd60e51b815260206004820152600960248201526820a2222fa2a92927a960b91b60448201526064016103c8565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261164e908590611875565b50505050565b6000610ffd61166161199e565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561171f5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016103c8565b8360ff16601b148061173457508360ff16601c145b61178b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016103c8565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa1580156117df573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166118425760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016103c8565b95945050505050565b60006001600160ff1b03821660ff83901c601b0161186b868287856116a2565b9695505050505050565b600080836001600160a01b0316836040516118909190611e21565b6000604051808303816000865af19150503d80600081146118cd576040519150601f19603f3d011682016040523d82523d6000602084013e6118d2565b606091505b5091509150816119245760405162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460448201526064016103c8565b80511561164e578080602001905181019061193f9190611bb9565b61164e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103c8565b60007f00000000000000000000000000000000000000000000000000000000000000004614156119ed57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b80356001600160a01b0381168114611aa857600080fd5b919050565b600082601f830112611abd578081fd5b813567ffffffffffffffff80821115611ad857611ad8611f79565b604051601f8301601f19908116603f01168101908282118183101715611b0057611b00611f79565b81604052838152866020858801011115611b18578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215611b45578081fd5b6114f582611a91565b600080600060608486031215611b62578182fd5b611b6b84611a91565b9250611b7960208501611a91565b9150611b8760408501611a91565b90509250925092565b60008060408385031215611ba2578182fd5b611bab83611a91565b946020939093013593505050565b600060208284031215611bca578081fd5b815180151581146114f5578182fd5b600060208284031215611bea578081fd5b5035919050565b6000806000806000858703610180811215611c0a578182fd5b61010080821215611c19578283fd5b611c21611ea7565b9150611c2c88611a91565b8252611c3a60208901611a91565b60208301526040880135604083015260608801356060830152611c5f60808901611a91565b6080830152611c7060a08901611a91565b60a083015260c0888101359083015260e0808901359083015290955086013567ffffffffffffffff80821115611ca4578283fd5b611cb089838a01611aad565b955061012088013594506101408801359350610160880135915080821115611cd6578283fd5b50611ce388828901611aad565b9150509295509295909350565b6000806000806000806000878903610200811215611d0c578283fd5b61014080821215611d1b578384fd5b611d23611ed1565b9150611d2e8a611a91565b8252611d3c60208b01611a91565b602083015260408a0135604083015260608a0135606083015260808a0135608083015260a08a013560a0830152611d7560c08b01611a91565b60c0830152611d8660e08b01611a91565b60e08301526101008a81013590830152610120808b01359083015290975088013567ffffffffffffffff80821115611dbc578384fd5b611dc88b838c01611aad565b97506101608a0135915080821115611dde578384fd5b50611deb8a828b01611aad565b95505061018088013593506101a088013592506101c08801359150611e136101e08901611a91565b905092959891949750929550565b60008251815b81811015611e415760208186018101518583015201611e27565b81811115611e4f5782828501525b509190910192915050565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6020808252600990820152682727aa2fa7aba722a960b91b604082015260600190565b604051610100810167ffffffffffffffff81118282101715611ecb57611ecb611f79565b60405290565b604051610140810167ffffffffffffffff81118282101715611ecb57611ecb611f79565b60008219821115611f0857611f08611f63565b500190565b600082611f2857634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611f4757611f47611f63565b500290565b600082821015611f5e57611f5e611f63565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212200b74c448c67e6a27559774a3621fd29894e4d0d6d575dae4e98fc2d2afbb77a164736f6c63430008040033",
  "devdoc": {
    "author": "DODO Breeder",
    "kind": "dev",
    "methods": {},
    "title": "DODOLimitOrder",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3619,
        "contract": "src/DODOLimitOrder.sol:DODOLimitOrder",
        "label": "_OWNER_",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3621,
        "contract": "src/DODOLimitOrder.sol:DODOLimitOrder",
        "label": "_NEW_OWNER_",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3623,
        "contract": "src/DODOLimitOrder.sol:DODOLimitOrder",
        "label": "_INITIALIZED_",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 2142,
        "contract": "src/DODOLimitOrder.sol:DODOLimitOrder",
        "label": "_FILLED_TAKER_AMOUNT_",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2148,
        "contract": "src/DODOLimitOrder.sol:DODOLimitOrder",
        "label": "_RFQ_FILLED_TAKER_AMOUNT_",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2152,
        "contract": "src/DODOLimitOrder.sol:DODOLimitOrder",
        "label": "isWhiteListed",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2156,
        "contract": "src/DODOLimitOrder.sol:DODOLimitOrder",
        "label": "isAdminListed",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2158,
        "contract": "src/DODOLimitOrder.sol:DODOLimitOrder",
        "label": "_DODO_APPROVE_PROXY_",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2160,
        "contract": "src/DODOLimitOrder.sol:DODOLimitOrder",
        "label": "_FEE_RECEIVER_",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}