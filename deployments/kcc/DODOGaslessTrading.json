{
  "address": "0xa7b9C3a116b20bEDDdBE4d90ff97157f67F0bD97",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "insurance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dodoApprove",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dodoApproveProxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "AddAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newInsurance",
          "type": "address"
        }
      ],
      "name": "ChangeInsurance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        }
      ],
      "name": "GaslessOrderFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "RemoveAdmin",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "GASLESS_ORDER_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_DODO_APPROVE_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_DODO_APPROVE_PROXY_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_INSURANCE_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_IS_ADMIN_",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "_IS_FILLED_",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddr",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newInsurance",
          "type": "address"
        }
      ],
      "name": "changeInsurance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "fromToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "toToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fromAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "toAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slot",
              "type": "uint256"
            }
          ],
          "internalType": "struct GaslessOrder",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "routeData",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "route",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxCompensation",
          "type": "uint256"
        }
      ],
      "name": "matchingRFQByPlatform",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddr",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x694cc0fd8357173b7979c2edbc3c4dffb35e5390615514f4c4ec2fe368f25fe4",
  "receipt": {
    "to": null,
    "from": "0xb37136B338C6cC0E459A35fe9Aa036f6b5A147c0",
    "contractAddress": "0xa7b9C3a116b20bEDDdBE4d90ff97157f67F0bD97",
    "transactionIndex": 1,
    "gasUsed": "1557912",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000800000000001000000400000000000000000000004000000000000000000000001000000000000000010000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x223d65b7b542bdb0f69bfe6bfb2f15550013be2c482d61767ffae859c26fddd7",
    "transactionHash": "0x694cc0fd8357173b7979c2edbc3c4dffb35e5390615514f4c4ec2fe368f25fe4",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 12982288,
        "transactionHash": "0x694cc0fd8357173b7979c2edbc3c4dffb35e5390615514f4c4ec2fe368f25fe4",
        "address": "0xa7b9C3a116b20bEDDdBE4d90ff97157f67F0bD97",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b37136b338c6cc0e459a35fe9aa036f6b5a147c0"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x223d65b7b542bdb0f69bfe6bfb2f15550013be2c482d61767ffae859c26fddd7"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 12982288,
        "transactionHash": "0x694cc0fd8357173b7979c2edbc3c4dffb35e5390615514f4c4ec2fe368f25fe4",
        "address": "0xa7b9C3a116b20bEDDdBE4d90ff97157f67F0bD97",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000b37136b338c6cc0e459a35fe9aa036f6b5a147c0",
          "0x000000000000000000000000b37136b338c6cc0e459a35fe9aa036f6b5a147c0"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x223d65b7b542bdb0f69bfe6bfb2f15550013be2c482d61767ffae859c26fddd7"
      }
    ],
    "blockNumber": 12982288,
    "cumulativeGasUsed": "1594536",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb37136B338C6cC0E459A35fe9Aa036f6b5A147c0",
    "0xb37136B338C6cC0E459A35fe9Aa036f6b5A147c0",
    "0xA9148dC69f71b8f3dF71193a48f2915980dB8C19",
    "0x5BaF16d57620Cb361F622232F3cb4090e35F3da2"
  ],
  "numDeployments": 1,
  "solcInputHash": "9e299c46b5bdc8324e828cc93e5863fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"insurance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dodoApprove\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dodoApproveProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newInsurance\",\"type\":\"address\"}],\"name\":\"ChangeInsurance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"GaslessOrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"RemoveAdmin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GASLESS_ORDER_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DODO_APPROVE_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DODO_APPROVE_PROXY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_INSURANCE_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_IS_ADMIN_\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_IS_FILLED_\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newInsurance\",\"type\":\"address\"}],\"name\":\"changeInsurance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"internalType\":\"struct GaslessOrder\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"routeData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"route\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxCompensation\",\"type\":\"uint256\"}],\"name\":\"matchingRFQByPlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/DODOGaslessTrading.sol\":\"DODOGaslessTrading\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"src/DODOGaslessTrading.sol\":{\"content\":\"/*\\n    Copyright 2021 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IDODOApproveProxy} from \\\"./intf/IDODOApproveProxy.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"./lib/SafeERC20.sol\\\";\\nimport {EIP712} from \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n * @title DODOGaslessTrading\\n * @author DODO Breeder\\n * @notice DODO Gasless Trading is an insurance service. It is part of DLOP, DODO Limit Order Protocol.\\n * The trader signs the order and sends it to DODO's backend service. DODO guarantees that the order\\n * will be submitted and filled without any slippage.\\n * DODO does not act directly as a counterparty to the trader, but integrates all the on-chain liquidity\\n * through DODO's routing system. If the final result is better than the original order, DODO collects\\n * these additional token as a premium. Otherwise DODO compensates the difference to the trader.\\n * When compensating, DODO will try to pay toToken first. If the insurance inventory is not enough\\n * to pay, then the compensation will be paid in the fromToken.\\n */\\n\\nstruct GaslessOrder {\\n    address signer;\\n    address fromToken;\\n    address toToken;\\n    uint256 fromAmount;\\n    uint256 toAmount;\\n    uint256 expiration;\\n    uint256 slot;\\n}\\n\\ncontract DODOGaslessTrading is\\n    EIP712(\\\"DODO Limit Order Protocol\\\", \\\"1\\\"),\\n    Ownable\\n{\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant GASLESS_ORDER_TYPEHASH =\\n        keccak256(\\n            \\\"Order(address signer,address fromToken,address toToken,uint256 fromAmount,uint256 toAmount,uint256 expiration,uint256 slot)\\\"\\n        );\\n\\n    //=============== Storage ===============\\n\\n    address public _INSURANCE_;\\n    address public immutable _DODO_APPROVE_;\\n    address public immutable _DODO_APPROVE_PROXY_;\\n    mapping(address => bool) public _IS_ADMIN_;\\n    mapping(bytes32 => bool) public _IS_FILLED_;\\n\\n    //=============== Events ===============\\n\\n    event AddAdmin(address admin);\\n\\n    event RemoveAdmin(address admin);\\n\\n    event ChangeInsurance(address newInsurance);\\n\\n    event GaslessOrderFilled(bytes32 orderHash);\\n\\n    //=============== Functions ===============\\n\\n    constructor(\\n        address owner,\\n        address insurance,\\n        address dodoApprove,\\n        address dodoApproveProxy\\n    ) {\\n        transferOwnership(owner);\\n        _INSURANCE_ = insurance;\\n        _DODO_APPROVE_ = dodoApprove;\\n        _DODO_APPROVE_PROXY_ = dodoApproveProxy;\\n    }\\n\\n    function matchingRFQByPlatform(\\n        GaslessOrder calldata order,\\n        bytes calldata signature,\\n        bytes calldata routeData,\\n        address route,\\n        uint256 maxCompensation\\n    ) external {\\n        require(_IS_ADMIN_[msg.sender], \\\"ACCESS_DENIED\\\");\\n\\n        // verify order\\n        bytes32 orderHash = _hashOrder(order);\\n        require(\\n            ECDSA.recover(orderHash, signature) == order.signer,\\n            \\\"DLOP:INVALID_SIGNATURE\\\"\\n        );\\n        require(order.expiration > block.timestamp, \\\"DLOP:ORDER_EXPIRED\\\");\\n        require(!_IS_FILLED_[orderHash], \\\"DLOP:ORDER_FILLED\\\");\\n\\n        // flash swap: transfer trader's FROM token in\\n        IDODOApproveProxy(_DODO_APPROVE_PROXY_).claimTokens(\\n            order.fromToken,\\n            order.signer,\\n            address(this),\\n            order.fromAmount\\n        );\\n\\n        // swap using DODO Route\\n        uint256 swapResult;\\n        {\\n            uint256 originToTokenBalance = IERC20(order.toToken).balanceOf(\\n                address(this)\\n            );\\n            _approveMax(\\n                IERC20(order.fromToken),\\n                _DODO_APPROVE_,\\n                order.fromAmount\\n            );\\n            require(route != _DODO_APPROVE_PROXY_, \\\"DLOP:ROUTE_ADDRESS_REJECT\\\");\\n            (bool success, ) = route.call(routeData);\\n            require(success, \\\"DLOP:DODO_ROUTE_FAILED\\\");\\n            uint256 toTokenBalance = IERC20(order.toToken).balanceOf(\\n                address(this)\\n            );\\n            swapResult = toTokenBalance - originToTokenBalance;\\n        }\\n\\n        // pay trader TO token\\n        if (swapResult >= order.toAmount) {\\n            // fund extra TO token to insurance\\n            IERC20(order.toToken).safeTransfer(order.signer, order.toAmount);\\n            IERC20(order.toToken).safeTransfer(\\n                _INSURANCE_,\\n                IERC20(order.toToken).balanceOf(address(this))\\n            );\\n        } else {\\n            IERC20(order.toToken).safeTransfer(order.signer, swapResult);\\n            // compensate the trader\\n            uint256 compensation = order.toAmount - swapResult;\\n            require(\\n                compensation <= maxCompensation,\\n                \\\"DLOP:COMPENSATION_EXCEED\\\"\\n            );\\n            if (IERC20(order.toToken).balanceOf(_INSURANCE_) >= compensation) {\\n                // compensate TO token if balance enough\\n                IDODOApproveProxy(_DODO_APPROVE_PROXY_).claimTokens(\\n                    order.toToken,\\n                    _INSURANCE_,\\n                    order.signer,\\n                    compensation\\n                );\\n            } else {\\n                // otherwise compensate FROM token with the price signed in order\\n                IDODOApproveProxy(_DODO_APPROVE_PROXY_).claimTokens(\\n                    order.fromToken,\\n                    _INSURANCE_,\\n                    order.signer,\\n                    (compensation * order.fromAmount) / order.toAmount\\n                );\\n            }\\n        }\\n\\n        _IS_FILLED_[orderHash] = true;\\n        emit GaslessOrderFilled(orderHash);\\n    }\\n\\n    //============ Ownable ============\\n\\n    function addAdmin(address userAddr) external onlyOwner {\\n        _IS_ADMIN_[userAddr] = true;\\n        emit AddAdmin(userAddr);\\n    }\\n\\n    function removeAdmin(address userAddr) external onlyOwner {\\n        _IS_ADMIN_[userAddr] = false;\\n        emit RemoveAdmin(userAddr);\\n    }\\n\\n    function changeInsurance(address newInsurance) external onlyOwner {\\n        _INSURANCE_ = newInsurance;\\n        emit ChangeInsurance(newInsurance);\\n    }\\n\\n    //============ Private ============\\n\\n    function _approveMax(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) private {\\n        uint256 allowance = token.allowance(address(this), to);\\n        if (allowance < amount) {\\n            if (allowance > 0) {\\n                token.safeApprove(to, 0);\\n            }\\n            token.safeApprove(to, type(uint256).max);\\n        }\\n    }\\n\\n    function _hashOrder(GaslessOrder memory order)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        // keccak256(\\n        //     abi.encode(\\n        //         GASLESS_ORDER_TYPEHASH,\\n        //         order.signer,\\n        //         order.fromToken,\\n        //         order.toToken,\\n        //         order.fromAmount,\\n        //         order.toAmount\\n        //         order.expiration,\\n        //         order.slot\\n        //     )\\n        // )\\n        bytes32 structHash;\\n        bytes32 orderTypeHash = GASLESS_ORDER_TYPEHASH;\\n        assembly {\\n            let start := sub(order, 32)\\n            let tmp := mload(start)\\n            // 256 = (1+7)*32\\n            // [0...32)   bytes: GASLESS_ORDER_TYPEHASH\\n            // [32...256) bytes: order\\n            mstore(start, orderTypeHash)\\n            structHash := keccak256(start, 256)\\n            mstore(start, tmp)\\n        }\\n        return _hashTypedDataV4(structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x85c1bd7ef524c10484439a411e7118ee66aa0ea634cee85514b18fdb2723642a\",\"license\":\"Apache-2.0\"},\"src/intf/IDODOApproveProxy.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity 0.8.4;\\n\\ninterface IDODOApproveProxy {\\n    function claimTokens(address token,address who,address dest,uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x3c04e33703c073994cd2f4c6805aacc9f91ba76f706160f1c788091d62651651\",\"license\":\"Apache-2.0\"},\"src/lib/SafeERC20.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n    This is a simplified version of OpenZepplin's SafeERC20 library\\n\\n*/\\n\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa05fad82feb4ca42a16b42a6a2ea2b12122761a328b29632d63f47813806750b\",\"license\":\"Apache-2.0\"},\"src/lib/SafeMath.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\n\\n/**\\n * @title SafeMath\\n * @author DODO Breeder\\n *\\n * @notice Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"MUL_ERROR\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"DIVIDING_ERROR\\\");\\n        return a / b;\\n    }\\n\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 quotient = div(a, b);\\n        uint256 remainder = a - quotient * b;\\n        if (remainder > 0) {\\n            return quotient + 1;\\n        } else {\\n            return quotient;\\n        }\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SUB_ERROR\\\");\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ADD_ERROR\\\");\\n        return c;\\n    }\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\\n        uint256 z = x / 2 + 1;\\n        y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x66ce291455c6a244d3cbb85df07d36802293bb2c4d112f6cecb91d6bcc105b05\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6101806040523480156200001257600080fd5b5060405162001dee38038062001dee8339810160408190526200003591620002e0565b604080518082018252601981527f444f444f204c696d6974204f726465722050726f746f636f6c000000000000006020808301918252835180850190945260018452603160f81b908401528151902060e08190527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66101008190524660a0529192917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f620001288184846040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6080523060601b60c05261012052506200014e9250620001489150503390565b6200019e565b6200015984620001ee565b600180546001600160a01b039094166001600160a01b0319909416939093179092556001600160601b0319606091821b81166101405291901b1661016052506200033c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146200024e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b038116620002b55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000245565b620002c0816200019e565b50565b80516001600160a01b0381168114620002db57600080fd5b919050565b60008060008060808587031215620002f6578384fd5b6200030185620002c3565b93506200031160208601620002c3565b92506200032160408601620002c3565b91506200033160608601620002c3565b905092959194509250565b60805160a05160c05160601c60e05161010051610120516101405160601c6101605160601c611a21620003cd600039600081816101ff015281816105c20152818161072c01528181610afd0152610bac01526000818160ee0152610701015260006114ea01526000611539015260006115140152600061146d01526000611497015260006114c10152611a216000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063937fa7031161008c578063b08d659511610066578063b08d6595146101e7578063eb99be12146101fa578063f2fde38b14610221578063fb63184e1461023457600080fd5b8063937fa7031461016c57806399a12ead1461019f5780639ae78b5a146101d457600080fd5b80631785f53c146100d457806346e74298146100e9578063704802751461012d578063715018a6146101405780638c733318146101485780638da5cb5b1461015b575b600080fd5b6100e76100e2366004611709565b610257565b005b6101107f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e761013b366004611709565b6102e2565b6100e7610360565b6100e7610156366004611709565b610396565b6000546001600160a01b0316610110565b61018f61017a366004611709565b60026020526000908152604090205460ff1681565b6040519015158152602001610124565b6101c67f6a8dbbec051463148d27a29a3c9fe4f78c6d0a2b88174d9c44f9be5c3b15fc6081565b604051908152602001610124565b6100e76101e2366004611762565b61040e565b600154610110906001600160a01b031681565b6101107f000000000000000000000000000000000000000000000000000000000000000081565b6100e761022f366004611709565b610ccb565b61018f61024236600461174a565b60036020526000908152604090205460ff1681565b6000546001600160a01b0316331461028a5760405162461bcd60e51b815260040161028190611932565b60405180910390fd5b6001600160a01b038116600081815260026020908152604091829020805460ff1916905590519182527f753f40ca3312b2408759a67875b367955e7baa221daf08aa3d643d96202ac12b91015b60405180910390a150565b6000546001600160a01b0316331461030c5760405162461bcd60e51b815260040161028190611932565b6001600160a01b038116600081815260026020908152604091829020805460ff1916600117905590519182527fad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba91016102d7565b6000546001600160a01b0316331461038a5760405162461bcd60e51b815260040161028190611932565b6103946000610d66565b565b6000546001600160a01b031633146103c05760405162461bcd60e51b815260040161028190611932565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f74b2bb8da08ce82e665420ee864fd487d4ccd449434dc6fd13819141bd994454906020016102d7565b3360009081526002602052604090205460ff1661045d5760405162461bcd60e51b815260206004820152600d60248201526c1050d0d154d4d7d11153925151609a1b6044820152606401610281565b6000610476610471368a90038a018a611805565b610db6565b90506104856020890189611709565b6001600160a01b03166104ce8289898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610dfe92505050565b6001600160a01b03161461051d5760405162461bcd60e51b8152602060048201526016602482015275444c4f503a494e56414c49445f5349474e415455524560501b6044820152606401610281565b428860a00135116105655760405162461bcd60e51b8152602060048201526012602482015271111313d40e93d491115497d156141254915160721b6044820152606401610281565b60008181526003602052604090205460ff16156105b85760405162461bcd60e51b8152602060048201526011602482015270111313d40e93d491115497d19253131151607a1b6044820152606401610281565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016630a5ea4666105f760408b0160208c01611709565b61060460208c018c611709565b308c606001356040518563ffffffff1660e01b81526004016106299493929190611908565b600060405180830381600087803b15801561064357600080fd5b505af1158015610657573d6000803e3d6000fd5b505050506000808960400160208101906106719190611709565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b1580156106b257600080fd5b505afa1580156106c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ea91906118a7565b905061072a6106ff60408c0160208d01611709565b7f00000000000000000000000000000000000000000000000000000000000000008c60600135610e22565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b031614156107ac5760405162461bcd60e51b815260206004820152601960248201527f444c4f503a524f5554455f414444524553535f52454a454354000000000000006044820152606401610281565b6000856001600160a01b031688886040516107c89291906118bf565b6000604051808303816000865af19150503d8060008114610805576040519150601f19603f3d011682016040523d82523d6000602084013e61080a565b606091505b50509050806108545760405162461bcd60e51b8152602060048201526016602482015275111313d40e9113d113d7d493d5551157d1905253115160521b6044820152606401610281565b600061086660608d0160408e01611709565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b1580156108a757600080fd5b505afa1580156108bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108df91906118a7565b90506108eb83826119be565b9350505050886080013581106109de5761093061090b60208b018b611709565b60808b013561092060608d0160408e01611709565b6001600160a01b03169190610ee6565b6001546109d9906001600160a01b031661095060608c0160408d01611709565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561099157600080fd5b505afa1580156109a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c991906118a7565b61092060608d0160408e01611709565b610c6d565b6109ff6109ee60208b018b611709565b8261092060608d0160408e01611709565b6000610a0f8260808c01356119be565b905083811115610a615760405162461bcd60e51b815260206004820152601860248201527f444c4f503a434f4d50454e534154494f4e5f45584345454400000000000000006044820152606401610281565b80610a7260608c0160408d01611709565b6001546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a082319060240160206040518083038186803b158015610ab657600080fd5b505afa158015610aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aee91906118a7565b10610ba2576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016630a5ea466610b3260608d0160408e01611709565b6001546001600160a01b0316610b4b60208f018f611709565b856040518563ffffffff1660e01b8152600401610b6b9493929190611908565b600060405180830381600087803b158015610b8557600080fd5b505af1158015610b99573d6000803e3d6000fd5b50505050610c6b565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016630a5ea466610be160408d0160208e01611709565b6001546001600160a01b0316610bfa60208f018f611709565b8e608001358f6060013587610c0f919061199f565b610c19919061197f565b6040518563ffffffff1660e01b8152600401610c389493929190611908565b600060405180830381600087803b158015610c5257600080fd5b505af1158015610c66573d6000803e3d6000fd5b505050505b505b60008281526003602052604090819020805460ff19166001179055517f031a3a58995b193a45e2431fd17d6a328e1e33b06e7327b23db4d355cf96d91790610cb89084815260200190565b60405180910390a1505050505050505050565b6000546001600160a01b03163314610cf55760405162461bcd60e51b815260040161028190611932565b6001600160a01b038116610d5a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610281565b610d6381610d66565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b601f19810180517f6a8dbbec051463148d27a29a3c9fe4f78c6d0a2b88174d9c44f9be5c3b15fc60808352610100832091909252600091610df682610f4e565b949350505050565b6000806000610e0d8585610fa2565b91509150610e1a81611012565b509392505050565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e9060440160206040518083038186803b158015610e6d57600080fd5b505afa158015610e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea591906118a7565b905081811015610ee0578015610eca57610eca6001600160a01b038516846000611213565b610ee06001600160a01b03851684600019611213565b50505050565b6040516001600160a01b038316602482015260448101829052610f4990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611337565b505050565b6000610f9c610f5b611460565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b600080825160411415610fd95760208301516040840151606085015160001a610fcd87828585611587565b9450945050505061100b565b8251604014156110035760208301516040840151610ff8868383611674565b93509350505061100b565b506000905060025b9250929050565b600081600481111561103457634e487b7160e01b600052602160045260246000fd5b141561103d5750565b600181600481111561105f57634e487b7160e01b600052602160045260246000fd5b14156110ad5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610281565b60028160048111156110cf57634e487b7160e01b600052602160045260246000fd5b141561111d5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610281565b600381600481111561113f57634e487b7160e01b600052602160045260246000fd5b14156111985760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610281565b60048160048111156111ba57634e487b7160e01b600052602160045260246000fd5b1415610d635760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610281565b80158061129c5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561126257600080fd5b505afa158015611276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129a91906118a7565b155b6113075760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610281565b6040516001600160a01b038316602482015260448101829052610f4990849063095ea7b360e01b90606401610f12565b600080836001600160a01b03168360405161135291906118cf565b6000604051808303816000865af19150503d806000811461138f576040519150601f19603f3d011682016040523d82523d6000602084013e611394565b606091505b5091509150816113e65760405162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646044820152606401610281565b805115610ee05780806020019051810190611401919061172a565b610ee05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610281565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156114b957507f000000000000000000000000000000000000000000000000000000000000000046145b156114e357507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156115be575060009050600361166b565b8460ff16601b141580156115d657508460ff16601c14155b156115e7575060009050600461166b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561163b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166116645760006001925092505061166b565b9150600090505b94509492505050565b6000806001600160ff1b0383168161169160ff86901c601b611967565b905061169f87828885611587565b935093505050935093915050565b80356001600160a01b03811681146116c457600080fd5b919050565b60008083601f8401126116da578182fd5b50813567ffffffffffffffff8111156116f1578182fd5b60208301915083602082850101111561100b57600080fd5b60006020828403121561171a578081fd5b611723826116ad565b9392505050565b60006020828403121561173b578081fd5b81518015158114611723578182fd5b60006020828403121561175b578081fd5b5035919050565b600080600080600080600087890361016081121561177e578384fd5b60e081121561178b578384fd5b5087965060e088013567ffffffffffffffff808211156117a9578485fd5b6117b58b838c016116c9565b90985096506101008a01359150808211156117ce578485fd5b506117db8a828b016116c9565b90955093506117ef905061012089016116ad565b9150610140880135905092959891949750929550565b600060e08284031215611816578081fd5b60405160e0810181811067ffffffffffffffff8211171561184557634e487b7160e01b83526041600452602483fd5b604052611851836116ad565b815261185f602084016116ad565b6020820152611870604084016116ad565b6040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c08201528091505092915050565b6000602082840312156118b8578081fd5b5051919050565b8183823760009101908152919050565b60008251815b818110156118ef57602081860181015185830152016118d5565b818111156118fd5782828501525b509190910192915050565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561197a5761197a6119d5565b500190565b60008261199a57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156119b9576119b96119d5565b500290565b6000828210156119d0576119d06119d5565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220ff5a0f24a70ed07b5d4cf19ed45675740529207f3876de957da9e00cf39592b564736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063937fa7031161008c578063b08d659511610066578063b08d6595146101e7578063eb99be12146101fa578063f2fde38b14610221578063fb63184e1461023457600080fd5b8063937fa7031461016c57806399a12ead1461019f5780639ae78b5a146101d457600080fd5b80631785f53c146100d457806346e74298146100e9578063704802751461012d578063715018a6146101405780638c733318146101485780638da5cb5b1461015b575b600080fd5b6100e76100e2366004611709565b610257565b005b6101107f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e761013b366004611709565b6102e2565b6100e7610360565b6100e7610156366004611709565b610396565b6000546001600160a01b0316610110565b61018f61017a366004611709565b60026020526000908152604090205460ff1681565b6040519015158152602001610124565b6101c67f6a8dbbec051463148d27a29a3c9fe4f78c6d0a2b88174d9c44f9be5c3b15fc6081565b604051908152602001610124565b6100e76101e2366004611762565b61040e565b600154610110906001600160a01b031681565b6101107f000000000000000000000000000000000000000000000000000000000000000081565b6100e761022f366004611709565b610ccb565b61018f61024236600461174a565b60036020526000908152604090205460ff1681565b6000546001600160a01b0316331461028a5760405162461bcd60e51b815260040161028190611932565b60405180910390fd5b6001600160a01b038116600081815260026020908152604091829020805460ff1916905590519182527f753f40ca3312b2408759a67875b367955e7baa221daf08aa3d643d96202ac12b91015b60405180910390a150565b6000546001600160a01b0316331461030c5760405162461bcd60e51b815260040161028190611932565b6001600160a01b038116600081815260026020908152604091829020805460ff1916600117905590519182527fad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba91016102d7565b6000546001600160a01b0316331461038a5760405162461bcd60e51b815260040161028190611932565b6103946000610d66565b565b6000546001600160a01b031633146103c05760405162461bcd60e51b815260040161028190611932565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f74b2bb8da08ce82e665420ee864fd487d4ccd449434dc6fd13819141bd994454906020016102d7565b3360009081526002602052604090205460ff1661045d5760405162461bcd60e51b815260206004820152600d60248201526c1050d0d154d4d7d11153925151609a1b6044820152606401610281565b6000610476610471368a90038a018a611805565b610db6565b90506104856020890189611709565b6001600160a01b03166104ce8289898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610dfe92505050565b6001600160a01b03161461051d5760405162461bcd60e51b8152602060048201526016602482015275444c4f503a494e56414c49445f5349474e415455524560501b6044820152606401610281565b428860a00135116105655760405162461bcd60e51b8152602060048201526012602482015271111313d40e93d491115497d156141254915160721b6044820152606401610281565b60008181526003602052604090205460ff16156105b85760405162461bcd60e51b8152602060048201526011602482015270111313d40e93d491115497d19253131151607a1b6044820152606401610281565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016630a5ea4666105f760408b0160208c01611709565b61060460208c018c611709565b308c606001356040518563ffffffff1660e01b81526004016106299493929190611908565b600060405180830381600087803b15801561064357600080fd5b505af1158015610657573d6000803e3d6000fd5b505050506000808960400160208101906106719190611709565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b1580156106b257600080fd5b505afa1580156106c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ea91906118a7565b905061072a6106ff60408c0160208d01611709565b7f00000000000000000000000000000000000000000000000000000000000000008c60600135610e22565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b031614156107ac5760405162461bcd60e51b815260206004820152601960248201527f444c4f503a524f5554455f414444524553535f52454a454354000000000000006044820152606401610281565b6000856001600160a01b031688886040516107c89291906118bf565b6000604051808303816000865af19150503d8060008114610805576040519150601f19603f3d011682016040523d82523d6000602084013e61080a565b606091505b50509050806108545760405162461bcd60e51b8152602060048201526016602482015275111313d40e9113d113d7d493d5551157d1905253115160521b6044820152606401610281565b600061086660608d0160408e01611709565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b1580156108a757600080fd5b505afa1580156108bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108df91906118a7565b90506108eb83826119be565b9350505050886080013581106109de5761093061090b60208b018b611709565b60808b013561092060608d0160408e01611709565b6001600160a01b03169190610ee6565b6001546109d9906001600160a01b031661095060608c0160408d01611709565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561099157600080fd5b505afa1580156109a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c991906118a7565b61092060608d0160408e01611709565b610c6d565b6109ff6109ee60208b018b611709565b8261092060608d0160408e01611709565b6000610a0f8260808c01356119be565b905083811115610a615760405162461bcd60e51b815260206004820152601860248201527f444c4f503a434f4d50454e534154494f4e5f45584345454400000000000000006044820152606401610281565b80610a7260608c0160408d01611709565b6001546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a082319060240160206040518083038186803b158015610ab657600080fd5b505afa158015610aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aee91906118a7565b10610ba2576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016630a5ea466610b3260608d0160408e01611709565b6001546001600160a01b0316610b4b60208f018f611709565b856040518563ffffffff1660e01b8152600401610b6b9493929190611908565b600060405180830381600087803b158015610b8557600080fd5b505af1158015610b99573d6000803e3d6000fd5b50505050610c6b565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016630a5ea466610be160408d0160208e01611709565b6001546001600160a01b0316610bfa60208f018f611709565b8e608001358f6060013587610c0f919061199f565b610c19919061197f565b6040518563ffffffff1660e01b8152600401610c389493929190611908565b600060405180830381600087803b158015610c5257600080fd5b505af1158015610c66573d6000803e3d6000fd5b505050505b505b60008281526003602052604090819020805460ff19166001179055517f031a3a58995b193a45e2431fd17d6a328e1e33b06e7327b23db4d355cf96d91790610cb89084815260200190565b60405180910390a1505050505050505050565b6000546001600160a01b03163314610cf55760405162461bcd60e51b815260040161028190611932565b6001600160a01b038116610d5a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610281565b610d6381610d66565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b601f19810180517f6a8dbbec051463148d27a29a3c9fe4f78c6d0a2b88174d9c44f9be5c3b15fc60808352610100832091909252600091610df682610f4e565b949350505050565b6000806000610e0d8585610fa2565b91509150610e1a81611012565b509392505050565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e9060440160206040518083038186803b158015610e6d57600080fd5b505afa158015610e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea591906118a7565b905081811015610ee0578015610eca57610eca6001600160a01b038516846000611213565b610ee06001600160a01b03851684600019611213565b50505050565b6040516001600160a01b038316602482015260448101829052610f4990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611337565b505050565b6000610f9c610f5b611460565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b600080825160411415610fd95760208301516040840151606085015160001a610fcd87828585611587565b9450945050505061100b565b8251604014156110035760208301516040840151610ff8868383611674565b93509350505061100b565b506000905060025b9250929050565b600081600481111561103457634e487b7160e01b600052602160045260246000fd5b141561103d5750565b600181600481111561105f57634e487b7160e01b600052602160045260246000fd5b14156110ad5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610281565b60028160048111156110cf57634e487b7160e01b600052602160045260246000fd5b141561111d5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610281565b600381600481111561113f57634e487b7160e01b600052602160045260246000fd5b14156111985760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610281565b60048160048111156111ba57634e487b7160e01b600052602160045260246000fd5b1415610d635760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610281565b80158061129c5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561126257600080fd5b505afa158015611276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129a91906118a7565b155b6113075760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610281565b6040516001600160a01b038316602482015260448101829052610f4990849063095ea7b360e01b90606401610f12565b600080836001600160a01b03168360405161135291906118cf565b6000604051808303816000865af19150503d806000811461138f576040519150601f19603f3d011682016040523d82523d6000602084013e611394565b606091505b5091509150816113e65760405162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646044820152606401610281565b805115610ee05780806020019051810190611401919061172a565b610ee05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610281565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156114b957507f000000000000000000000000000000000000000000000000000000000000000046145b156114e357507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156115be575060009050600361166b565b8460ff16601b141580156115d657508460ff16601c14155b156115e7575060009050600461166b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561163b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166116645760006001925092505061166b565b9150600090505b94509492505050565b6000806001600160ff1b0383168161169160ff86901c601b611967565b905061169f87828885611587565b935093505050935093915050565b80356001600160a01b03811681146116c457600080fd5b919050565b60008083601f8401126116da578182fd5b50813567ffffffffffffffff8111156116f1578182fd5b60208301915083602082850101111561100b57600080fd5b60006020828403121561171a578081fd5b611723826116ad565b9392505050565b60006020828403121561173b578081fd5b81518015158114611723578182fd5b60006020828403121561175b578081fd5b5035919050565b600080600080600080600087890361016081121561177e578384fd5b60e081121561178b578384fd5b5087965060e088013567ffffffffffffffff808211156117a9578485fd5b6117b58b838c016116c9565b90985096506101008a01359150808211156117ce578485fd5b506117db8a828b016116c9565b90955093506117ef905061012089016116ad565b9150610140880135905092959891949750929550565b600060e08284031215611816578081fd5b60405160e0810181811067ffffffffffffffff8211171561184557634e487b7160e01b83526041600452602483fd5b604052611851836116ad565b815261185f602084016116ad565b6020820152611870604084016116ad565b6040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c08201528091505092915050565b6000602082840312156118b8578081fd5b5051919050565b8183823760009101908152919050565b60008251815b818110156118ef57602081860181015185830152016118d5565b818111156118fd5782828501525b509190910192915050565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561197a5761197a6119d5565b500190565b60008261199a57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156119b9576119b96119d5565b500290565b6000828210156119d0576119d06119d5565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220ff5a0f24a70ed07b5d4cf19ed45675740529207f3876de957da9e00cf39592b564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/DODOGaslessTrading.sol:DODOGaslessTrading",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1624,
        "contract": "src/DODOGaslessTrading.sol:DODOGaslessTrading",
        "label": "_INSURANCE_",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1632,
        "contract": "src/DODOGaslessTrading.sol:DODOGaslessTrading",
        "label": "_IS_ADMIN_",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1636,
        "contract": "src/DODOGaslessTrading.sol:DODOGaslessTrading",
        "label": "_IS_FILLED_",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}